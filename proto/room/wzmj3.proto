package wzmj3;
import "common.proto";
import "room/room.proto";

/*
	游戏信息
*/
message GameInfo{
	optional uint32 ante 				= 1; 	//剩余每张牌的积分
	optional uint32 bomb				= 2;	//炸弹积分
	optional common.BuildInfo buildInfo 	= 3; 	//创建房间的配置信息
	optional bool AA 					= 4; 	//是否AA
	optional uint32 code 				= 5;	//房号
}
message OpCard{
	optional uint32 op 				= 1; 	//吃 碰 碰杠 补杠 暗杠
	optional uint32 card			= 2;	//
}
/*
	游戏中的玩家信息
*/
message GamePlayer{
	optional room.Player player 	= 1; 	//玩家信息
	optional bool play 				= 2; 	//false:旁观 true:在玩
	optional bool offline 			= 3; 	//false:在线 true:离开
	optional bool pay 				= 4; 	//是否支付,根据state来判断
	optional bool ready 			= 5;	//false 未准备 true 准备
	optional uint32 cardsNum 		= 6; 	//牌数
	repeated uint32 cards 			= 7; 	//牌
	optional bool turn 				= 8; 	//false:没有轮到你操作 true:轮到你操作
	repeated uint32 outcards 		= 9; 	//已经打出的牌
	repeated OpCard opcards 		= 10; 	//吃碰杠的牌
	optional OperateInfo opInfo     = 11;	//我的操作(nil:没 ~nil:有)
	optional int32 points 			= 12; 	//总积分
	optional uint32 lastInCard 		= 13; 	//最后一张摸牌
	repeated uint32 huaCards 		= 14; 	//花牌
	optional uint32 fong 			= 15; 	//风向
	optional int32 agree 			= 16; 	//0:未投 1:赞成 2:反对
	optional int32 maidiData        = 17;	//1取消 2买底 3顶底
	optional int32 rewardFen        = 18;	//玩家奖励分
}
/*
	投票信息
*/
message VoteInfo
{
	optional uint32 promoterId 	= 1;	//发起投票者ID
	optional bool 	poll 		= 2;	//是否发起投票
	optional uint32 time 		= 3;	//发起投票时间
	optional uint32 expiryTime 	= 4;	//发起投票总时间
	optional uint32 leftTime 	= 5;	//发起投票剩余时间
}
/*
	游戏登录
*/
message GameLoginRsp {
	optional common.Result result 	= 1;   	//结果状态
	optional GameInfo gameInfo 		= 2; 	//游戏配置
	repeated GamePlayer players 	= 3; 	//所有玩家信息
	optional uint32 state 			= 4; 	//处于玩牌状态
											//Table.MASTER_PAY 		= 1 	--房主支付状态
											//Table.NON_MASTER_PAY	= 2 	--非房主支付状态
											//Table.START 			= 3 	--游戏准备开始
											//Table.DEAL 			= 4 	--发牌
											//Table.TURN 			= 5 	--玩家操作阶段
											//Table.END 			= 6 	--结果阶段
	optional uint32 masterId		= 5;	//房主id
	optional uint32 clockTime		= 6;	//倒计时
	optional uint32 round 			= 7;	//第几局
	optional uint32 totalRound 		= 8;	//总局数
	optional uint32 leftNum 		= 9; 	//剩余张数
	optional uint32 bankerId 		= 10; 	//庄家 0:暂无庄家 >0:有庄家
	repeated uint32 caiShens 		= 11; 	//财神
	optional uint32 diHu 			= 12; 	//底胡分数
	optional VoteInfo destroyVoteInfo 	= 13;	//解散房间的投票信息
}

/*
	广播登录房间
*/
message GamePlayerLoginRsp {
	optional common.Result result  	= 1;  //结果状态
	repeated GamePlayer players 	= 2;  //玩家信息
}
/*
	游戏开始(广播)
*/
message StartRsp {
	optional common.Result result 	= 1;	//结果状态
	optional uint32 round 			= 2;	//第几局
	optional uint32 totalRound 		= 3;	//总局数
	repeated uint32 readyUids 		= 4;	//准备玩家的UID
	optional uint32 diHu 			= 5; 	//底胡分数
}

/*
	准备操作
*/
message ReadyReq {
	optional common.Request request = 1; 	// 请求码
}

/*
	准备操作返回
*/
message ReadyRsp {
	optional common.Result result 	= 1;	//结果状态 
											//0:操作合法 
											//1:游戏已开始 
											//2:不在桌子上 
											//3:已经准备了 
											//4:钻石不足
											//5:服务器错误
											//6:等待房主续房
	optional uint32 uid 			= 2;	//准备玩家
}

/*
	摇骰子(广播)
*/
message ShakeDiceRsp {
	optional common.Result result 	= 1;   	//结果状态
	repeated uint32 numbers1        = 2;	//第一次
	repeated uint32 numbers2        = 3;	//第二次
	optional uint32 bankerId 		= 4;	//庄家
	optional uint32 dongerId 		= 5;	//东家
	optional uint32 diHu 			= 6; 	//底胡分数
}

/*
	发牌(明牌)(广播)
*/
message DealRsp {
	optional common.Result result 	= 1;   	//结果状态
	optional uint32 cardsNum        = 2;	//发牌数量
	repeated uint32 cards 			= 3; 	//牌
	optional uint32 bankerId 		= 4; 	//庄家
	repeated uint32 caiShens		= 5; 	//财神
}

/*
	操作信息
*/
message OperateInfo {
	optional uint32 uid 			= 1;    //玩家id
	optional uint32 op        		= 2;	//
											//Poker.OpNone 			= 0x0 		--无操作
											//Poker.OpOut 			= 0x1 		--出牌
											//Poker.OpBuGang 		= 0x2 		--补杠
											//Poker.OpAnGang 		= 0x4 		--暗杠
											//Poker.OpZiMo 			= 0x8 		--自摸
											//Poker.OpPeng 			= 0x10 		--碰
											//Poker.OpPengGang 		= 0x20 		--碰杠
											//Poker.OpHu 			= 0x40 		--胡
											//Poker.OpGiveUp 		= 0x80 		--过
											//Poker.OpLeftChi		= 0x100 	--左吃
											//Poker.OpMiddleChi		= 0x200 	--中吃
											//Poker.OpRightChi		= 0x400 	--右吃
											//Poker.OpQiPaiHu		= 0x800 	--起牌胡
	optional uint32 opCard 			= 3; 	//card的意义由op来定
											//1:左吃(567) card为5
											//2:中吃(567) card为6
											//3:右吃(567) card为7
											//4:碰(555)   card为5
											//5:杠(5555)  card为5
	repeated uint32 anCards 		= 4;	// 多暗杠的情况
	repeated uint32 buCards 		= 5; 	// 多补杠的情况
	repeated uint32 handCards 		= 6; 	// 胡-自摸时玩家的手牌
	optional uint32 targetUid		= 7;	// 被吃碰的目标玩家id
	optional bool noGiveUp			= 8;	// 不能放弃
	repeated uint32 opFongPais		= 9;	//可操作的风牌
}

/*
	补花(广播)
*/
message BuHua {
	optional uint32 uid 			= 2;    //玩家id
	optional OperateInfo opInfo 	= 3;	//玩家操作
	repeated uint32 huaCards 		= 4;	//玩家花牌 (对所有玩家可见)
	repeated uint32 buCards 		= 5;	//玩家补牌 (对自己可见)
	optional uint32 buCardsNum 		= 6;	//补牌数量
}
/*
	补花(广播)
*/
message BuHuaRsp {
	optional common.Result result 	= 1;   	//结果状态
	repeated BuHua buHuas 			= 2;	//玩家补牌
}

/*
	轮到某玩家摸牌(广播)
*/
message TurnRsp {
	optional common.Result result 	= 1;   	//结果状态
	optional uint32 uid        		= 2;	//摸牌玩家
	optional int32 card 			= 3;	//摸到的牌 自己摸牌的时候有值
											//-1:庄家首次操作
											//-2:海底牌
	optional OperateInfo opInfo 	= 4;	//自己摸牌之后的操作 其他玩家摸牌时没有
	repeated uint32 huaCards 		= 5;	//花牌
	optional bool haiDi				= 6; 	//分张回合
}

/*
	某玩家操作  出牌、吃碰杠等
*/
message OperationReq {
	optional common.Request request = 1; 	//请求码
	optional uint32 op 				= 2;    //操作值
	optional uint32 card 			= 3;	//操作的牌
}
/*
	某玩家操作返回(广播)
*/
message OperationRsp {
	optional common.Result result 	= 1;	//结果状态 
											//0:操作合法
											//1:玩家不存在
											//2:操作非法
	optional OperateInfo opInfo     = 2;    //上家操作
	optional OperateInfo myInfo     = 3;	//我的操作
	repeated uint32 opFongPais		= 4;	//可操作的风牌
}

/*
	台数详情
*/
message DetailTai {
	optional uint32 reason 			= 1;	//原因
	optional uint32 tais    		= 2;    //台数
	optional uint32 value    		= 3;    //值
}
/*
	胡数详情
*/
message DetailHu {
	optional uint32 reason 			= 1;	//原因
	optional uint32 hus    			= 2;    //胡数
	optional uint32 value    		= 3;    //值
}

/*
	输家信息
*/
message LostInfo {
	optional int32 uid 			= 1;  	//输分的玩家
	optional int32 points 		= 2; 	//输的分，一般为负数
}

/*
	详细结算积分
*/
message WinInfo {
	optional int32 points 			= 4; 	//本次赢分
	repeated LostInfo lostInfos 	= 5; 	//输家信息
}


/* 结算信息 */
message EndInfo {
	optional uint32 uid 					= 1;	//玩家
	repeated uint32 leftCards 				= 2;	//玩家剩余牌
	optional int32 points 					= 3;	//当局积分变动
	optional int32 totalPoints 				= 4;	//总积分
 	repeated OpCard opcards	 				= 5;	//吃碰杠的牌
	repeated int32 huCards 					= 6; 	//胡牌
	repeated WinInfo winInfos 				= 7;  	//详细积分
	repeated DetailTai detailTais 			= 8;  	//详细台数
	repeated DetailHu detailHus 			= 9;  	//详细胡数
	optional int32 zimo 					= 10;  	//自摸次数
	optional int32 huType 					= 11; 	//胡牌类型, 1软牌，2硬牌，4双番
	optional int32 csMoney 					= 12; 	//财神钱
	optional int32 lianZhuang 				= 13; 	//连庄
	optional int32 diFen 					= 14; 	//底分
	optional int32 rewardFen 				= 15; 	//奖励分
	optional int32 huTypeDetail 			= 16; 	//胡牌具体类型
}

/*
	总结算信息
*/
message FinalInfo {
	optional uint32 uid 			= 1;	//玩家
	optional int32 maxPoints 		= 2;	//单局最高得分
	optional int32 winTimes 		= 3;	//赢的次数
	optional int32 lostTimes 		= 4;	//输的次数
	optional int32 totalPoints 		= 5;	//总积分
	optional int32 totalZiMo 		= 6;	//自摸次数
	optional int32 totalBeHu 		= 7;	//点炮次数
	optional int32 totalRewardFen 	= 8;	//总奖励分
}

/*
	结算
*/
message EndRsp {
	optional common.Result result 	= 1;   	//结果状态
	optional bool lastRound 		= 2; 	//是否是最后一局
	repeated EndInfo endinfos 		= 3; 	//结算信息
	repeated FinalInfo finalInfos 	= 4; 	//总结算信息(只有最后一局才有)
	optional bool draw 				= 6; 	//是否流局
	optional bool destroy 			= 8;	//是否中途解散
}

/*
	积分
*/
message Points {
	optional uint32 uid 			= 1;	//玩家
	optional int32 points 			= 2;	//变动的积分
	optional int32 totalPoints 		= 3;	//总积分
}
/*
	积分变动
*/
message PointsRsp {
	optional common.Result result 	= 1;	//结果状态 0:操作合法 !0:操作非法
	optional uint32 reason 			= 2; 	//变动原因 1:炸弹 2:未定义
	repeated Points points 			= 3;	//玩家积分
}

/*
	是否买底
*/
message StartMaidiRsp {
	optional common.Result result = 1;
}

/*
	是否顶底
*/
message StartDingdiRsp {
	optional common.Result result = 1;
}

/*
	买底或顶底
*/
message MaidiReq {
	optional common.Request request 	= 1;
	optional int32			maidiData 	= 2;	//1取消 2买底 3顶底
}

message MaidiRsp {
	optional common.Result result = 1;
	optional uint32        uid 	  	   = 2;	//玩家
	optional int32		   maidiData   = 3;	//1取消 2买底 3顶底
}

