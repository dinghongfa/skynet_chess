package club;
import "common.proto";

/*************************************
	俱乐部相关  开始
**************************************/
//0xA500 用户来到页面
message EnterPageReq {
	required common.Request request = 1; 	// 请求码
	required uint32 uid             = 2;    //uid
}
message EnterPageRsp {
	required common.Result result 			= 1;   	//结果状态
													//0 成功
													//1 参数不正确
													//2 用户不存在
	required uint32 diamondForCreateClub     = 2; 	//创建俱乐部所需的钻石
}

//0xA501 用户退出页面
message LeavePageReq {
	required common.Request request = 1; 	// 请求码
	required uint32 uid             = 2;    //uid
}
message LeavePageRsp {
	required common.Result result 	= 1;   	//结果状态
}

message ClubConfig {
	optional uint32 verify             = 1;     //是否需要审核才能进入. 0:不需要审核，1 需要审核[默认]， 2 回答问题正确直接进
	optional string question           = 2;     //问题
	optional string answer             = 3;     //正确答案
	optional bool freezed			   = 4;	//冻结
}

message ClubInfo {
	required uint32 id                 = 1;    // 俱乐部id
	optional string name               = 2;    //俱乐部名称
	optional string desc               = 3;    //
	optional string inviteCode         = 4;    //邀请码
	optional string createTime         = 5;    //创建时间
	optional common.PlayerInfo creator = 6;    //创建者
	optional uint32 memberCount        = 7;    //成员数
	optional string gameTypes          = 8;    //玩法
	optional ClubConfig config         = 9;    //其它配置
	optional uint32 level              = 10;   //该用户在此俱乐部中的level
	optional uint32 payWays            = 11;   //该俱乐部所支持的支付方式
												//0:无支付方式 0x1:房主支付 0x2:aa支付 0x4:大赢家支付 0x8:俱乐部支付
												//比如: payWays = 3, 即支持 房主支付 + aa支付
	optional uint32 undealApplyMessage = 12;	//未处理的申请消息(只有俱乐部群主及管理员可见)
												
}

// 0xA561
message CreateClubReq {
	required common.Request request = 1; 	// 请求码

	required string name            = 2;    //俱乐部名称
	optional string desc            = 3;
	optional ClubConfig config      = 4;    //其他配置
}

message CreateClubRsp {
	required common.Result result 	= 1;   	//结果状态 0
											//0 成功
											//1 参数不正确
											//2 用户不存在
											//3 超出最大限制
											//4 小于创建俱乐部所需的最小钻石
											//6 数据库错误

	optional ClubInfo clubInfo      = 2;
}

// 0xA56C
message EditClubReq {
	required common.Request request = 1; 	// 请求码

	optional ClubInfo clubInfo      = 2;
}

message EditClubRsp {
	required common.Result result 	= 1;   	//结果状态 0
											//0 成功
											//1 参数不正确
											//2 用户不存在
											//3 乐部不存在或没有权限
											//4 用户没权限(只有创建者或管理员才可以修改)
											//5 支付方式不正确
											//6 数据库错误

	optional ClubInfo clubInfo      = 2;
}

//0xA562
message DestroyClubReq {
	required common.Request request = 1; 	// 请求码
	required uint32 clubId          = 2;
}

message DestroyClubRsp {
	required common.Result result 	= 1;   	//结果状态
											//0 成功
											//1 参数不正确
											//2 用户不存在
											//6 数据库错误
	optional uint32 clubId          = 2;
}

//0xA567
message ClubListReq {
	required common.Request request = 1;    // 请求码
	required uint32 uid             = 2;    //
	required uint32 queryType       = 3;    //0:创建者创建的所有俱乐部，1:用户加入的所有俱乐部
}

message ClubListRsp {
	required common.Result result   = 1;	// 结果状态
											//0 成功
											//1 参数不正确
											//2 用户不存在
											//6 数据库错误
	optional uint32 queryType       = 2;    //0:创建者创建的所有俱乐部，1:用户加入的所有俱乐部
	repeated ClubInfo clubInfos     = 3;
}

message RuleInfo {
	required uint32 id                  = 1;
	required common.BuildInfo buildInfo = 2;
}

//0xA563
message CreateRuleReq {
	required common.Request request     = 1; // 请求码

	required uint32 clubId              = 2;
	required common.BuildInfo buildInfo = 3;
}

message CreateRuleRsp {
	required common.Result result       = 1;   	//结果状态
											//0 成功
											//1 参数不正确
											//2 用户不存在
											//3 超出最大限制
											//4 支付方式不支持
											//6 数据库错误
											//7 用户不一致

	optional uint32 clubId              = 2;    //俱乐部id
	optional RuleInfo ruleInfo          = 3;
}

//0xA56A
message EditRuleReq {
	required common.Request request = 1; 	// 请求码

	required uint32 clubId          = 2;
	required RuleInfo ruleInfo      = 3;
}

message EditRuleRsp {
	required common.Result result   = 1;    //结果状态
											//0 成功
											//1 参数不正确
											//2 用户不存在
											//3 俱乐部不存在或没有权限
											//4 玩法不存在
											//6 数据库错误
	optional uint32   clubId        = 2;    //俱乐部id
	required RuleInfo ruleInfo      = 3;
}

//0xA564
message DestroyRuleReq {
	required common.Request request = 1;     // 请求码
	required uint32 ruleId          = 2;
}

message DestroyRuleRsp {
	required common.Result result   = 1; 	// 结果状态
											//0 成功
											//1 参数不正确
											//2 用户不存在
											//6 数据库错误
	optional uint32 ruleId          = 2;
}

//0xA568
message RuleListReq {
	required common.Request request = 1; 	// 请求码
	required uint32 clubId          = 2;
}

message RuleListRsp {
	required common.Result result = 1;		// 结果状态
											//0 成功
											//1 参数不正确
											//2 用户不存在
											//6 数据库错误
	repeated RuleInfo ruleInfos   = 2;
}

//0xA565 用户申请加入俱乐部
message ApplyJoinClubReq {
	required common.Request request = 1; 	// 请求码
	required uint32 clubId          = 2;
}

message ApplyJoinClubRsp {
	required common.Result result   = 1; 	// 结果状态
											// 0 成功
											// 1 参数不正确
											// 2 用户不存在（未登录）
											// 3 用户已申请或已加入
											// 4 俱乐部不存在
											// 5 加入的俱乐部数已达到上限
											// 6 数据库错误
	optional ClubInfo clubInfo      = 2;
	optional uint32   clubId        = 3;
	optional uint32   level         = 4;    // 用户的等级 0:未批准, 1:普通成员 2:管理员  3:创建者
}

//0xA56B  允许用户加入
message AllowJoinClubReq {
	required common.Request request = 1; 	// 请求码
	required uint32 clubId          = 2;
	required uint32 uid             = 3;    // 被允许或拒绝的用户
	required uint32 allow           = 4;    // 0拒绝，1允许
}

message AllowJoinClubRsp {
	required common.Result result   = 1; 	// 结果状态
											// 0 成功
											// 1 参数不正确
											// 2 用户不存在（未登录）
											// 6 数据库错误
											// 9 已加入
	optional ClubInfo clubInfo      = 2;
	optional uint32   clubId        = 3;
	optional uint32   uid           = 4;    // 被允许用户
	optional uint32   level         = 5;    // 被允许用户的等级 0:拒绝, 1:普通成员 2:管理员  3:创建者
}

//0xA566
message LeftClubReq {
	required common.Request request = 1; 	// 请求码
	required uint32 clubId          = 2;
	required uint32 uid             = 3;	//被删除人，可以是本人或别人
}

message LeftClubRsp {
	required common.Result result   = 1; 	// 结果状态
											// 0: 成功
											// 1: 参数不正确
											// 2: 用户不存在
											// 3: 数据库错误
											// 4: 俱乐部不存在
											// 5: 创建者自己不能退出，只能解散俱乐部
											// 6: 权限不够，不能踢人
											// 7: 俱乐部中没有该玩家
	optional uint32 clubId          = 2;
	optional uint32 uid             = 3;	//被删除人，可以是本人或别人
}
//俱乐部成员信息
message MemberInfo {
	required uint32 uid             = 1;
	optional uint32 level           = 2;
	optional string headUrl         = 3;
	optional string nick            = 4;
	optional uint32 totalPlayTimes  = 5;
	optional uint32 playTimes       = 6;
	optional string joinTime        = 7;
	optional bool	online          = 8; 	//是否在线（true:在线 false:离线）
	optional uint32 roomId       	= 9; 	//正在某个房间(0:不在 >0:在)
	optional uint32 gender       	= 10; 	//性别
}

//0xA569  获取俱乐部成员列表
message MemberListReq {
	required common.Request request = 1; 	// 请求码
	required uint32 clubId          = 2;	// 请求已经在俱乐部的成员
	optional uint32 start 			= 3;	// 开始位置
	optional uint32 count 			= 4; 	// 拉取数量
	optional uint32 uid				= 5;    // 搜索单个玩家
}
//0xA569  获取俱乐部成员列表
message MemberListRsp {
	required common.Result result   = 1; 	// 结果状态
											// 0: 成功
											// 1: 参数不正确
											// 2: 用户不存在
											// 6: 数据库错误
	repeated MemberInfo memberInfos = 2;
	optional uint32 start 			= 3;	// 开始位置返回
	optional uint32 count 			= 4; 	// 拉取数量返回
	optional uint32 uid				= 5;    // 搜索单个玩家返回
	optional uint32 clubId          = 6;	// 请求已经在俱乐部的成员
}

// 0xA522 获取审核中的成员列表
message MemberShieldListReq {
	required common.Request request = 1; 	// 请求码
	required uint32 clubId          = 2;    // 请求申请加入，但未审核的玩家列表
}

message MemberShieldListRsp {
	required common.Result result = 1; 	// 请求码
	repeated MemberInfo memberInfos = 2;	// 审核列表，不需要获取playTimes 
}

/* 
	赋权 0xA523 
*/
message GrantPrivilegesReq {
	required common.Request request = 1; 	// 请求码
	optional uint32 clubId          = 2;    // 俱乐部id
	optional uint32 uid       		= 3;    // 成员id
	optional uint32 level       	= 4;    // 新的level 1 降为普通成员 2 升为管理员
}

message GrantPrivilegesRsp {
	required common.Result result 	= 1; 	// 请求码
											// 0:成功
											// 1:玩家未登录
											// 2:参数错误
											// 3:数据库错误
											// 4:俱乐部不存在
											// 5:不是该俱乐部的群主
											// 6:不是该俱乐部的成员
											// 7:不能对自己操作

	optional uint32 clubId          = 2;    // 俱乐部id
	optional uint32 uid       		= 3;    // 成员id
	optional uint32 level       	= 4;    // 新的level
}

// 俱乐部房间玩家
message ClubPlayer {
	optional common.PlayerInfo userInfo  = 1;  //当前玩家信息
}

// 俱乐部房间
message ClubRoom {
	optional uint32 code 				= 1;  //房间id
	optional RuleInfo ruleInfo 			= 2;  //房间创建信息 
	optional uint32 round 				= 3;  //第几局
	optional uint32 state 				= 4;  //状态 (0:未开始 1:开始 2:游戏结束)
	optional uint32 validityPeriod 		= 5;  //有效期
	repeated ClubPlayer clubPlayers 	= 6;  //当前玩家列表
	optional uint32 createTime 			= 7;  //房间创建时间 排序用
	optional uint32 leftTime 			= 8;  //房间有效剩余时间(只对state == 0 or state == 2 有用)
	optional uint32 clubId 				= 9;  //俱乐部id
	optional uint32 masterId 			= 10;  //俱乐部id
}

// 俱乐部创建房间 0xA56D
message CreateRoomReq {
	required common.Request request 	= 1; 	// 请求码
	required uint32 ruleId          	= 2; 	// 规则id (如果ruleId > 0,则使用规则去创建房间)
	required uint32 clubId          	= 3; 	// 俱乐部id
	optional common.BuildInfo buildInfo = 4; 	// 创建信息
}
//
message CreateRoomRsp {
	required common.Result result   = 1; 	// 结果状态
											// 0: 成功
											// 1: 用户不存在
											// 2: 参数不正确
											// 3: 数据库错误
											// 4: 俱乐部不存在
											// 5: 规则不存在
											// 6: 该俱乐部房间数量达到上限
											// 7: 房间已满
											// 8: 该俱乐部余额不足
											// 9: 该俱乐部冻结
											// 10: 尚有未完成牌局
											// 11: 该俱乐部不支付该支付方式
											// 12: 钻石不足
											// 13: 你已创建了一个房间
											// 14: 未知错误
	optional ClubRoom clubRoom 		= 2; 	// 房间信息
	optional uint32 playCode 		= 3; 	// 尚有未完成牌局的房间号
	optional uint32 builtCode 		= 4; 	// 已创建的房间号
}

// 俱乐部释放房间 0xA56E
message DestroyRoomReq {
	required common.Request request = 1; 	// 请求码
	optional uint32 tableId         = 2;    // 房间id
	optional uint32 createTime      = 3;    // 房间的创建时间
}
//
message DestroyRoomRsp {
	required common.Result result   = 1; 	// 结果状态
											// 0:请求解散房间成功
											// 1:未登录
											// 2 :参数非法
											// 3 :数据库错误
											// 4 :房间不存在
}
// 获取房间列表 0xA56F
message RoomListReq {
	required common.Request request = 1;  	// 请求码
	optional uint32 clubId          = 2;     // 俱乐部id
	optional uint32 ruleId          = 3;     // 规则id(0:全部 1:指定)
}

//
message RoomListRsp {
	required common.Result result   = 1; 	// 结果状态
											// 0 :成功
											// 1 :未登录
											// 2 :参数非法
											// 3 :数据库错误
	repeated ClubRoom clubRooms 	= 2; 	// 房间信息
}


/**********************
	俱乐部相关  结束
************************/

/**********************
	俱乐部与游戏进程之间的通信相关命令  开始
************************/

message ClubMasterInfo {
	optional uint32 uid          	= 1;    // 俱乐部管理员id
	optional uint32 totalDiamond    = 2;    // 俱乐部管理员总钻石
	optional uint32 deltaDiamond    = 3;    // 俱乐部管理员变化钻石
}

// 请求释放房间 0xA510
message AskDestroyRoomReq {
	required common.Request request = 1; 	// 请求码
	optional uint32 uid          	= 2;    // 请求释放房间的玩家id
											// (0表示系统超时释放, 非0表示玩家请求释放)
	optional uint32 tableId         = 3;    // 房间id
	optional uint32 createTime      = 4;    // 房间的创建时间
	optional uint32 fromGameId      = 5;    // 请求来自于哪个游戏进程
}
//
message AskDestroyRoomRsp {
	required common.Request request = 1; 	// 请求码
	optional uint32 status          = 2; 	// 状态码
											// 0:成功
											// 1:参数不合法
											// 2:数据库错误
											// 3:房间不存在
											// 4:不是房主，不能解散该房间
											// 5:未知错误
											// 6:游戏开始了，已发起投票，等待玩家解散

	optional uint32 uid          	= 3;    // 请求释放房间的玩家id
											// (0表示系统超时释放, 非0表示玩家请求释放)
	optional uint32 clubId 			= 4;  	// 俱乐部id
	optional uint32 tableId         = 5;    // 房间id
	optional uint32 createTime      = 6;    // 房间的创建时间
	optional ClubMasterInfo clubMasterInfo = 7;    // 俱乐部管理员信息
}


// 通知房间释放 0xA511
message NotifyDestroyRoomReq {
	required common.Request request = 1; 	// 请求码
}
//
message NotifyDestroyRoomRsp {
	required common.Result result   = 1; 	// 结果状态
											// 0:解散房间成功
											// 1:参数不合法
											// 2:数据库错误
											// 3:房间不存在
											// 4:不是房主，不能解散该房间
											// 5:未知错误
											// 6:游戏开始了，已发起投票，等待玩家解散
											// 7:游戏开始了, 针对超时系统自动解散

	optional uint32 uid         	= 2; 	// 谁解散了房间(0:系统超时解散了房间 >0:玩家)
	optional uint32 tableId         = 3; 	// 房间id
	optional uint32 createTime      = 4; 	// 房间的创建时间
}

//通知房间状态改变 0xA512
message NotifyRoomStatusRsp {
	required common.Result result   = 1; 	// 结果状态(一定为0)
	optional uint32 clubId          = 2; 	// 房间id
	optional uint32 tableId         = 3; 	// 房间id
	optional uint32 createTime      = 4; 	// 房间的创建时间
	optional uint32 state         	= 5; 	// 1:游戏开始
											// 2:游戏结束
											// 3:房间解散
											// 4:玩家登入
											// 5:玩家登出
											// 6:局数广播
											// 7:房间续费
	optional uint32 curRound        = 6; 	// 当前局数
	optional uint32 totalRound      = 7; 	// 总局数
	repeated ClubPlayer clubPlayers = 8;  	//当前玩家列表	
	optional uint32 endTime      	= 9; 	// 游戏结束时间	(只有结束的时候值才非0)								
	optional uint32 leftTime      	= 10; 	// 房间的剩余时间	(只有结束的时候值才非0)								
	optional uint32 validityPeriod  = 11; 	// 有效期						
	optional uint32 gameId  		= 12; 	// 游戏id(后台使用，前端可不对接该字段)								
}

/************************
   聊天消息相关  开始
************************/
message ChatMessage {
	optional uint32            id          = 1;    // 消息id
	optional uint32            msgType     = 2;    // 0:系统消息， 1:个人消息	
	optional uint32            isPrivate   = 3;    // 0:其它人可见, 1:私密消息（其它人不可见）
	optional uint32            createTime  = 4;    // 消息的时间戳
	required string            content     = 5;    // 消息内容
	required uint32            clubId      = 6;    // 
	optional common.PlayerInfo senderInfo  = 7;    // 发送者
}

//0xA570
message ChatMessageReq {
	required common.Request request  = 1; 	// 请求码
	required ChatMessage chatMessage = 2;
}

message ChatMessageRsp {
	required common.Result result    = 1; 	// 结果状态
											//0 处理成功
											//1 发送者不存在
											//2 参数错误
											//3 接收者不存在
											//4 玩法不存在或数据错误
	required ChatMessage chatMessage = 2;
}

//0xA571  获取最近的历史聊天记录(15条)
message HistoryChatMessageListReq {
	required common.Request request = 1; 	// 请求码
	required uint32 clubId          = 2;    // 
	optional uint32 msgType         = 3;    // 0:系统消息， 1:个人消息,  0xFF:所有消息
	optional uint32 offset          = 4;    // [默认]起始id，往后 (返回 id > offset的若干条消息)
	optional uint32 offsetTime      = 5;    // 起始时间，往前(返回createTime < offsetTime的最近的若干条消息)
	optional uint32 limit           = 6;    // 列表条目数（默认为15）
	optional bool   direction       = 7;    // 排序方向：false[默认]正向， true反向
}

message HistoryChatMessageListRsp {
	required common.Result result     = 1; 	// 结果状态
											//0 处理成功
											//1 发送者不存在
											//2 参数错误
											//6 数据库错误
	repeated ChatMessage chatMessages = 2;  //消息列表
}
/************************
   聊天消息相关  结束
************************/

/***********************
   系统推送消息 开始
***********************/
message UnreadSysMessage
{
	required uint32 clubId               = 1;
	optional uint32 msgType              = 2;     //1申请加入，2离开 3申请自动加入, 4申核通过
	optional uint32 count                = 3;    //未读消息数
}

// 0xA581 -- 推送最近没读过的消息
message SysMessageListReq {
	required common.Request request      = 1; 	// 请求码
}

message SysMessageListRsp {                             //不更改状态
	required common.Result result               = 1; 	//结果状态
														//0 处理成功
														//1 参数错误
														//6 数据库错误
	repeated UnreadSysMessage unreadSysMessages = 2;	//消息列表
}

message SysMessage {
	required uint32 id                   = 1;
	optional uint32 clubId               = 2;
	optional uint32 msgType              = 3;  //2离开 3申请自动加入, 4申核通过(不返回 1申请加入), 5:被踢
	optional uint32 createTime           = 4;
	optional uint32 recvTime             = 5;  //接收时间
	optional common.PlayerInfo applicant = 6;  //申请人
}

// 0xA582  -- 拉取最近的消息（不管有没有读过）标识已读
message PeekSysMessageListReq {
	required common.Request request  = 1; 	//请求码
	required uint32       clubId     = 2;
	optional uint32       offset     = 3;   // [默认]起始id，往后 (返回 id > offset的若干条消息)
	optional uint32       offsetTime = 4;   // 起始时间，往前(返回createTime < offsetTime的最近的若干条消息)
	optional uint32       limit      = 5;   //消息条数
	optional bool         direction  = 6;   // 排序方向：false[默认]正向， true反向
}

message PeekSysMessageListRsp {
	required common.Result result    = 1; 	// 结果状态
											//0 处理成功
											//1 参数错误
											//6 数据库错误
	repeated SysMessage sysMessages  = 2;  //消息列表
}



/* 
	0xA583 申请提醒
*/
message ApplyNoticeReq {
	required common.Request request      = 1; 	// 请求码
}

message ApplyNoticeRsp {
	required common.Result result        = 1; 	//结果状态
	optional uint32 clubId 				 = 2; 	// 俱乐部id
}
/* 
	0xA584 申请消息
*/
message ApplyMessageReq {
	required common.Request request      = 1; 	// 请求码
	optional uint32 clubId 				 = 2; 	// 俱乐部id
	optional uint32 pos 				 = 3; 	// 
	optional uint32 count 				 = 4; 	// 
}
message ApplyMessage {
	optional uint32 applicantUid 		= 1; 	//申请人ID
	optional string applicantNick 		= 2; 	//申请人昵称
	optional string applicantHeadUrl 	= 3; 	//申请人头像地址
	optional string applyTime 			= 4; 	//申请时间
	optional uint32 checkerUid 			= 5; 	//处理人ID
	optional string checkerNick 		= 6; 	//处理人昵称
	optional string checkerHeadUrl 		= 7; 	//处理人头像地址
	optional uint32 check 				= 8; 	//0:未处理 1:通过 2:自动通过 3:拒绝
	optional string checkTime			= 9; 	//处理时间
}
message ApplyMessageRsp {
	required common.Result result        = 1; 	//结果状态
												// 0:成功
												// 1:参数错误
												// 2:玩家未登录
												// 3:数据库错误
	repeated ApplyMessage applyMessages  = 2; 	//申请消息
	optional uint32 clubId 				 = 3; 	// 俱乐部id
	optional uint32 pos 				 = 5; 	// 
	optional uint32 count 				 = 6; 	// 
}

/***********************
   系统推送消息 结束
***********************/

/*
	0xA520 	俱乐部战绩
*/
message PlayRecordReq {
	required common.Request request  = 1; 	// 请求码
	optional uint32  pos         	 = 2; 	// 从pos位置拉取数据(0为起始数据)
	optional uint32  count         	 = 3; 	// 一次拉取多少条数(默认20条)
	optional uint32  startTime       = 4; 	// 起始时间
	optional uint32  endTime         = 5; 	// 结束时间
	optional uint32  clubId          = 6; 	// 俱乐部id
	optional uint32  type          	 = 7; 	// 谁的战绩(0:我的 1:俱乐部)
}

/*
	牌局记录玩家信息
*/
message RecordPlayer {
	optional common.PlayerInfo userInfo  = 1;  //当前玩家信息
	optional int32  points         		 = 2;  //结束时间
}
/*
	战绩记录
*/
message PlayRecord {
	optional uint32  gameType        	= 1; 	//游戏类型
	optional uint32  totalRound      	= 2; 	//局数
	optional uint32  tableId 	     	= 3; 	//房间号
	optional uint32  masterId 	     	= 4; 	//房主
	optional uint32  time 	 			= 5; 	//玩牌时间
	repeated RecordPlayer recordPlayers = 6; 	//参与玩牌的玩家信息
	optional common.PayWay payWay 		= 7; 	//支付方式
	optional string buildJson 			= 8; 	//房间配置
}
/*
	0xA520 	战绩返回
*/
message PlayRecordRsp {
	required common.Result result    	= 1; 	//结果状态
												// 0:成功
												// 1:未登录
												// 2:数据库错误
												// 3:玩家没有该俱乐部
												// 4:没有该类战绩
												// 5:玩家没有加入该俱乐部
	repeated PlayRecord playRecords 	= 2; 	//战绩记录
	optional uint32  clubId          	= 3; 	// 俱乐部id
	optional uint32  type          	  	= 4; 	// 谁的战绩(0:我的 1:俱乐部)
	optional uint32  playTimes          = 5; 	// 局数
	optional uint32  payment 	    	= 6; 	// 支付(根据前端提交的时间来计算)
	optional uint32  playFullTimes 	    = 7; 	// 打满的局数
}

/*
	获取牌局详情 0xA521
*/
message PlayRecordDetailReq {
	optional common.Request request 	= 1; 	// 请求码
	optional uint32 gameType  			= 2; 	// 指定游戏
	optional uint32 time 				= 3; 	// 时间, 标识是哪一场
	optional uint32 clubId 				= 4; 	// 俱乐部ID
	optional uint32 tableId 			= 5; 	// 桌子ID
}
/*
	某局玩家详情
*/
message PointsDetail {
	optional uint32 uid 			= 1; 	// 玩家ID
	optional string nick 			= 2; 	// 玩家ID
	optional int32 points 			= 3; 	// 当局积分
	optional int32 totalPoints 		= 4; 	// 总积分
	optional string infos 			= 5; 	// 附加信息，具体玩法具体定义
	optional string headUrl 		= 6; 	// 玩家头像地址
}
/*
	某局详情
*/
message RoundPoints {
	optional uint32 round 				= 1; // 第几局
	repeated PointsDetail PointsDetails = 2; // 当局详情
	optional string playbackId 			= 3; // 回放ID
	optional string endTime 			= 4; // 结束时间
}

/*
	获取牌局详情 返回 0x33
*/
message PlayRecordDetailRsp {
	optional common.Result result 	= 1;	// 结果状态 
											// 0:成功
											// 1:未登录
											// 2:参数非法
											// 3:数据库错误
											// 4:玩家没有加入该俱乐部
											// 5:牌局不存在

	optional uint32 gameType  		= 2; 	// 指定游戏
	optional uint32 time 			= 3; 	// 时间, 标识是哪一场
	repeated RoundPoints roundPoints= 4; 	// 牌局详情
	optional uint32 clubId 			= 5; 	// 俱乐部ID
}

/*
	推送  0xA590
*/
message PushRsp {
	optional common.Result 	result 		= 1;   	// 结果状态
	optional string json				= 2; 	// 推送 格式: type = 4 新邮件
}

/*
	0xA525 	场次信息
*/
message PlayInfoReq {
	required common.Request request  = 1; 	// 请求码
	optional uint32  startTime       = 2; 	// 起始时间(某一天的日期)
	optional uint32  count         	 = 3; 	// 一次拉取多少天(默认10天)
	optional uint32  clubId          = 4; 	// 俱乐部id
}

/*
	场次信息
*/
message PlayInfo {
	optional uint32  rounds      		= 1; 	//局数
	optional string  date 	 			= 2; 	//日期
	optional uint32  diamonds      		= 3; 	//钻石
}

/*
	0xA525 	场次信息
*/
message PlayInfoRsp {
	required common.Result result    	= 1; 	//结果状态
												// 0:成功
												// 1:未登录
												// 2:参数非法
												// 3:数据库错误
												// 4:玩家没有该俱乐部
	repeated PlayInfo playInfos 		= 2; 	// 玩牌信息
	optional uint32  clubId         	= 3; 	// 俱乐部id
	optional uint32  startTime       	= 4; 	// 起始时间(某一天的日期)
	optional uint32  count         	 	= 5; 	// 一次拉取多少天(默认10天)
}


/*
	0xA526 	场次详情
*/
message PlayInfoDetailReq {
	required common.Request request  = 1; 	// 请求码
	optional uint32  dateTime       = 2; 	// 某一天的日期
	optional uint32  clubId          = 3; 	// 俱乐部id
}

/*
	场次详情
*/
message PlayInfoDetail {
	optional uint32  playerCount 	 	= 1; 	//几人场
	optional uint32  totalRound      	= 2; 	//几局场
	optional uint32  rounds      		= 3; 	//玩了多少局
	optional uint32  gameType      		= 4; 	//玩法
}

/*
	0xA526 	场次详情
*/
message PlayInfoDetailRsp {
	required common.Result result    		= 1; 	//结果状态
													// 0:成功
													// 1:未登录
													// 2:参数非法
													// 3:数据库错误
													// 4:玩家没有该俱乐部
	repeated PlayInfoDetail playInfoDetails = 2; 	// 玩牌信息
	optional uint32  clubId         		= 3; 	// 俱乐部id
	optional uint32  dateTime       		= 4; 	// 某一天的日期
}


/*
	0xA527 	大赢家信息
*/
message PlayWinnerInfoReq {
	required common.Request request  = 1; 	// 请求码
	optional uint32  dateTime        = 2; 	// 某一天的日期
	optional uint32  pos         	 = 3; 	// 从0开始
	optional uint32  count         	 = 4; 	// 一次拉取多少天(默认10天)
	optional uint32  clubId          = 5; 	// 俱乐部id
	optional uint32  uid 		     = 6;   // 查询单个玩家的记录
}

/*
	大赢家信息
*/
message PlayWinnerInfo {
	optional ClubPlayer  clubPlayer 	= 1; 	//大赢家基本信息
	optional uint32  winTimes      		= 2; 	//赢了多少局
	optional uint32  rounds 			= 3; 	//玩了多少局
}

/*
	0xA527 	大赢家信息
*/
message PlayWinnerInfoRsp {
	required common.Result result    		= 1; 	//结果状态
													// 0:成功
													// 1:未登录
													// 2:数据库错误
													// 3:玩家没有该俱乐部
													// 4:没有该类战绩
													// 5:玩家没有加入该俱乐部
	repeated PlayWinnerInfo playWinnerInfos = 2; 	// 大赢家信息
	optional uint32  clubId         		= 3; 	// 俱乐部id
	optional uint32  dateTime        		= 4; 	// 某一天的日期
	optional uint32  pos         	 		= 5; 	// 从0开始
	optional uint32  count         	 		= 6; 	// 一次拉取多少天(默认10天)
	optional uint32  uid 					= 7;	// 查询单个玩家返回
}




/*
	0xA528 	排行信息
*/
message PlayRankInfoReq {
	required common.Request request  = 1; 	// 请求码
	optional uint32  rankType        = 2; 	// 0:总排行 1:日排行 2:周排行 3:月排行
	optional uint32  rankDate        = 3; 	// 总排行(不需要) 
											// 日排行(2018-08-16) 
											// 周排行(星期一所对应的日期) 
											// 例如mysql是这样转化
											// DATE_FORMAT(FROM_UNIXTIME(UNIX_TIMESTAMP(in_time) - IF(DAYOFWEEK(in_time) = 1, 6, DAYOFWEEK(in_time) - 2) * 24 * 3600), '%Y_%m_%d');
											// 月排行(2018-08-01) 每月1号的日期
	optional uint32  pos         	 = 4; 	// 从0开始
	optional uint32  count         	 = 5; 	// 一次拉取多少条(默认10条)
	optional uint32  clubId          = 6; 	// 俱乐部id
	optional uint32  uid 			 = 7;   // 查找玩家 
}

/*
	排行信息
*/
message PlayRankInfo {
	optional ClubPlayer  clubPlayer 	= 1; 	//大赢家基本信息
	optional uint32  position      		= 2; 	//名次
	optional uint32  points      		= 3; 	//积分
}

/*
	0xA528 	排行信息
*/
message PlayRankInfoRsp {
	required common.Result result    		= 1; 	//结果状态
													// 0:成功
													// 1:未登录
													// 2:参数非法
													// 3:数据库错误
	repeated PlayRankInfo playRankInfos 	= 2; 	// 排行信息
	optional uint32  rankType        		= 3; 	// 0:总排行 1:日排行 2:周排行 3:月排行
	optional uint32  rankDate        		= 4; 	// 总排行(不需要) 
													// 日排行(2018-08-16) 
													// 周排行(星期一所对应的日期) 
													// 例如mysql是这样转化
													// DATE_FORMAT(FROM_UNIXTIME(UNIX_TIMESTAMP(in_time) - IF(DAYOFWEEK(in_time) = 1, 6, DAYOFWEEK(in_time) - 2) * 24 * 3600), '%Y_%m_%d');
													// 月排行(2018-08-01) 每月1号的日期
	optional uint32  pos         			= 5; 	// 从0开始
	optional uint32  count         	 		= 6; 	// 一次拉取多少条(默认10条)
	optional uint32  clubId          		= 7; 	// 俱乐部id
	optional uint32  uid 			 		= 8;   // 查找玩家 
}